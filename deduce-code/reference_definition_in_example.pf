import Nat
import List
import Set
import MultiSet
import Maps

theorem definition_in_example: all ls:List<Nat>. if length(ls) = 0 then ls = []
proof
  arbitrary ls:List<Nat>
  switch ls {
    case [] {
      .
    }
    case node(x, ls') {
      assume A: length(node(x, ls')) = 0
      have B: 1 + length(ls') = 0  by definition length in A
      have C: suc(length(ls')) = 0 by definition operator+ in B
      conclude false by C
    }
  }
end